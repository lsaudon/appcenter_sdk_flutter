// Autogenerated from Pigeon (v22.4.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AppCenterApi {
  func start(secret: String) throws
  func setEnabled(enabled: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func isEnabled(completion: @escaping (Result<Bool, Error>) -> Void)
  func isConfigured() throws -> Bool
  func getInstallId(completion: @escaping (Result<String, Error>) -> Void)
  func isRunningInAppCenterTestCloud() throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AppCenterApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `AppCenterApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AppCenterApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let startChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterApi.start\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let secretArg = args[0] as! String
        do {
          try api.start(secret: secretArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startChannel.setMessageHandler(nil)
    }
    let setEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterApi.setEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        api.setEnabled(enabled: enabledArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setEnabledChannel.setMessageHandler(nil)
    }
    let isEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterApi.isEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isEnabledChannel.setMessageHandler { _, reply in
        api.isEnabled { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isEnabledChannel.setMessageHandler(nil)
    }
    let isConfiguredChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterApi.isConfigured\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isConfiguredChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isConfigured()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isConfiguredChannel.setMessageHandler(nil)
    }
    let getInstallIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterApi.getInstallId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getInstallIdChannel.setMessageHandler { _, reply in
        api.getInstallId { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getInstallIdChannel.setMessageHandler(nil)
    }
    let isRunningInAppCenterTestCloudChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterApi.isRunningInAppCenterTestCloud\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isRunningInAppCenterTestCloudChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isRunningInAppCenterTestCloud()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isRunningInAppCenterTestCloudChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AppCenterAnalyticsApi {
  func trackEvent(name: String, properties: [String: String]?, flags: Int64?) throws
  func pause() throws
  func resume() throws
  func analyticsSetEnabled(enabled: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func analyticsIsEnabled(completion: @escaping (Result<Bool, Error>) -> Void)
  func enableManualSessionTracker() throws
  func startSession() throws
  func setTransmissionInterval(seconds: Int64) throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AppCenterAnalyticsApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `AppCenterAnalyticsApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AppCenterAnalyticsApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let trackEventChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterAnalyticsApi.trackEvent\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      trackEventChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        let propertiesArg: [String: String]? = nilOrValue(args[1])
        let flagsArg: Int64? = nilOrValue(args[2])
        do {
          try api.trackEvent(name: nameArg, properties: propertiesArg, flags: flagsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      trackEventChannel.setMessageHandler(nil)
    }
    let pauseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterAnalyticsApi.pause\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseChannel.setMessageHandler { _, reply in
        do {
          try api.pause()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseChannel.setMessageHandler(nil)
    }
    let resumeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterAnalyticsApi.resume\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      resumeChannel.setMessageHandler { _, reply in
        do {
          try api.resume()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      resumeChannel.setMessageHandler(nil)
    }
    let analyticsSetEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterAnalyticsApi.analyticsSetEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      analyticsSetEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        api.analyticsSetEnabled(enabled: enabledArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      analyticsSetEnabledChannel.setMessageHandler(nil)
    }
    let analyticsIsEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterAnalyticsApi.analyticsIsEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      analyticsIsEnabledChannel.setMessageHandler { _, reply in
        api.analyticsIsEnabled { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      analyticsIsEnabledChannel.setMessageHandler(nil)
    }
    let enableManualSessionTrackerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterAnalyticsApi.enableManualSessionTracker\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      enableManualSessionTrackerChannel.setMessageHandler { _, reply in
        do {
          try api.enableManualSessionTracker()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      enableManualSessionTrackerChannel.setMessageHandler(nil)
    }
    let startSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterAnalyticsApi.startSession\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startSessionChannel.setMessageHandler { _, reply in
        do {
          try api.startSession()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startSessionChannel.setMessageHandler(nil)
    }
    let setTransmissionIntervalChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterAnalyticsApi.setTransmissionInterval\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setTransmissionIntervalChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let secondsArg = args[0] as! Int64
        do {
          let result = try api.setTransmissionInterval(seconds: secondsArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setTransmissionIntervalChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AppCenterCrashesApi {
  func generateTestCrash() throws
  func hasReceivedMemoryWarningInLastSession(completion: @escaping (Result<Bool, Error>) -> Void)
  func hasCrashedInLastSession(completion: @escaping (Result<Bool, Error>) -> Void)
  func crashesSetEnabled(enabled: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func crashesIsEnabled(completion: @escaping (Result<Bool, Error>) -> Void)
  func trackException(message: String, type: String?, stackTrace: String?, properties: [String: String]?) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AppCenterCrashesApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `AppCenterCrashesApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AppCenterCrashesApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let generateTestCrashChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterCrashesApi.generateTestCrash\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      generateTestCrashChannel.setMessageHandler { _, reply in
        do {
          try api.generateTestCrash()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      generateTestCrashChannel.setMessageHandler(nil)
    }
    let hasReceivedMemoryWarningInLastSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterCrashesApi.hasReceivedMemoryWarningInLastSession\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      hasReceivedMemoryWarningInLastSessionChannel.setMessageHandler { _, reply in
        api.hasReceivedMemoryWarningInLastSession { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      hasReceivedMemoryWarningInLastSessionChannel.setMessageHandler(nil)
    }
    let hasCrashedInLastSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterCrashesApi.hasCrashedInLastSession\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      hasCrashedInLastSessionChannel.setMessageHandler { _, reply in
        api.hasCrashedInLastSession { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      hasCrashedInLastSessionChannel.setMessageHandler(nil)
    }
    let crashesSetEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterCrashesApi.crashesSetEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      crashesSetEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        api.crashesSetEnabled(enabled: enabledArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      crashesSetEnabledChannel.setMessageHandler(nil)
    }
    let crashesIsEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterCrashesApi.crashesIsEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      crashesIsEnabledChannel.setMessageHandler { _, reply in
        api.crashesIsEnabled { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      crashesIsEnabledChannel.setMessageHandler(nil)
    }
    let trackExceptionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk_flutter.AppCenterCrashesApi.trackException\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      trackExceptionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let messageArg = args[0] as! String
        let typeArg: String? = nilOrValue(args[1])
        let stackTraceArg: String? = nilOrValue(args[2])
        let propertiesArg: [String: String]? = nilOrValue(args[3])
        do {
          try api.trackException(message: messageArg, type: typeArg, stackTrace: stackTraceArg, properties: propertiesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      trackExceptionChannel.setMessageHandler(nil)
    }
  }
}
